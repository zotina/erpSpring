voici le doc officiel du frappe erpnext : https://docs.frappe.io/erpnext , j ai cette api qui liste le Supplier Quotation  ,  c est corrrecte la liste mais ,  il faut rajouter un details au liste apres avoir appuyer sur un boutton detail et le detail d un Supplier Quotation  c est Supplier Quotation  Item , donc modifier mon reste pour les envoyer ces data  avec le format de json standard que j ai deja mis en place dans ce rest , et veuiller a ne pas oublier le liste de supplier en metadata deja dans le code  car il aurra un liste deroulante de suppllierer pour faire un filtre sur le Supplier Quotation ,  lors qu on clique sur detail les lignes de  Supplier Quotation  Item concernant cette id  serra afficher dan un autre tableau avec action update sur chaque ligne et lors qu on apuye sur update , on affiche le rate du ligne de  Supplier Quotation  Item dans un input  puis en peut le modifier cette rate ,  modifier le reste pour faire update de rate , d un Supplier Quotation  Item , analyse le doce et regarder quelles sont les colonnees et les doctypes a modifier apres la modification de cette ligne de  Supplier Quotation  Item   , je vais vous envoyer d abord d api : import frappe
from frappe import _
from erpnext.controllers.api.utils import validate_jwt

@frappe.whitelist(allow_guest=False)
@validate_jwt
def get_supplier_quotation_list():
    """
    REST API endpoint to fetch a list of Supplier Quotations with specific columns and child items.
    Returns: List of Supplier Quotations with Title, Status, Date, Valid Till, Grand Total, ID, child items, and supplier list in metadata.
    Example usage:
    http://erpnext.localhost:8000/api/method/erpnext.controllers.api.page.supplier_quotation_api.get_supplier_quotation_list
    Header: Authorization: Bearer <jwt_token>
    """
    try:
        # Check permissions
        if not frappe.has_permission("Supplier Quotation", "read"):
            frappe.local.response["status"] = "error"
            frappe.local.response["message"] = _("You do not have permission to read Supplier Quotation records.")
            return

        # Fetch Supplier Quotation records
        supplier_quotations = frappe.get_all(
            "Supplier Quotation",
            fields=[
                "title",
                "status",
                "transaction_date",
                "valid_till",
                "grand_total",
                "name"
            ],
            filters={},
            order_by="transaction_date desc"
        )

        # Fetch child items for each Supplier Quotation
        for quotation in supplier_quotations:
            child_items = frappe.get_all(
                "Supplier Quotation Item",
                filters={"parent": quotation["name"]},
                fields=["rate", "qty", "amount"]
            )
            quotation["child"] = child_items

        # Fetch list of supplier names
        suppliers = frappe.get_all("Supplier", fields=["name"], order_by="name asc")
        supplier_names = [supplier["name"] for supplier in suppliers]

        frappe.local.response["status"] = "success"
        frappe.local.response["data"] = supplier_quotations
        frappe.local.response["metadata"] = {"suppliers": supplier_names}

        return

    except Exception as e:
        frappe.log_error(f"Error fetching Supplier Quotation list: {str(e)}", "Supplier Quotation API")
        frappe.local.response["status"] = "error"
        frappe.local.response["message"] = _("An error occurred while fetching the Supplier Quotation list.")
        return
@frappe.whitelist(allow_guest=False)
@validate_jwt
def update_supplier_quotation_item_rate(parent, rate):
    """
    REST API endpoint to update the rate and amount fields in Supplier Quotation Item.
    Args:
        parent (str): The name of the Supplier Quotation (e.g., 'PUR-SQTN-2025-00001').
        rate (float): The new rate value to set for all items.
    Returns: Success message or error details.
    Example usage:
    http://erpnext.localhost:8000/api/method/erpnext.controllers.api.page.supplier_quotation_api.update_supplier_quotation_item_rate?parent=PUR-SQTN-2025-00001&rate=200
    Header: Authorization: Bearer <jwt_token>
    """
    try:
        # Validate inputs
        if not parent or not isinstance(parent, str):
            frappe.local.response["status"] = "error"
    
            frappe.local.response["message"] =_("Invalid or missing parent parameter. Please provide a valid Supplier Quotation ID.")
            return 
        try:
            rate = float(rate)
            if rate < 0:
                frappe.local.response["status"] = "error"
        
                frappe.local.response["message"] =_("Rate must be a non-negative number.")
                return 
        except (ValueError, TypeError):
            frappe.local.response["status"] = "error"
        
            frappe.local.response["message"] = _("Invalid rate parameter. Please provide a valid number.")
            return 

        # Check if the Supplier Quotation exists
        if not frappe.db.exists("Supplier Quotation", parent):
            frappe.local.response["status"] = "error"
        
            frappe.local.response["message"] =_("Supplier Quotation {0} does not exist.").format(parent)
            return 

        # Fetch Supplier Quotation Item records
        items = frappe.get_all(
            "Supplier Quotation Item",
            filters={"parent": parent},
            fields=["name", "qty"]
        )

        if not items:
            frappe.local.response["status"] = "error"
        
            frappe.local.response["message"] =_("No items found for Supplier Quotation {0}.").format(parent)
            return 

        # Update rate and amount for each item
        for item in items:
            frappe.db.set_value(
                "Supplier Quotation Item",
                item.name,
                {
                    "rate": rate,
                    "amount": rate * item.qty
                }
            )

        # Load the parent Supplier Quotation and recalculate totals
        supplier_quotation = frappe.get_doc("Supplier Quotation", parent)
        supplier_quotation.run_method("calculate_taxes_and_totals")
        supplier_quotation.db_update()

        # Commit the changes
        frappe.db.commit()

        frappe.local.response["status"] = "success"
        
        frappe.local.response["message"] =_("Successfully updated rate and amount for items in Supplier Quotation {0}.").format(parent)

        return

    except Exception as e:
        frappe.log_error(f"Error updating Supplier Quotation Item: {str(e)}", "Supplier Quotation Item API")
        
        frappe.local.response["status"] = "error"
        
        frappe.local.response["message"] = "An error occurred while updating the Supplier Quotation Item."
        
        return , j ai deja ceci en spring boot pour l appel de restb frappe erpnext :  package mg.itu.model;

import java.util.List;

public class ApiResponse<T> {
    private String status;
    private List<T> data;

    
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public List<T> getData() {
        return data;
    }

    public void setData(List<T> data) {
        this.data = data;
    }
}  package mg.itu.model;

public class SimpleApiResponse {
    private String status;
    private String message; 

    
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
} package mg.itu.model;

import java.util.List;

public class SupplierMetadataResponse<T> extends ApiResponse<T> {
    private Metadata metadata;

    public Metadata getMetadata() {
        return metadata;
    }

    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    public static class Metadata {
        private List<String> suppliers;

        public List<String> getSuppliers() {
            return suppliers;
        }

        public void setSuppliers(List<String> suppliers) {
            this.suppliers = suppliers;
        }
    }
}package mg.itu.model;

import java.util.List;

public class SupplierQuotation {
    private String title;
    private String status;
    private String transaction_date;
    private String valid_till;
    private Double grand_total;
    private String name;
    private List<SupplierQuotationItem> child;

    
    public String getTitle() {
        return title; 
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getTransaction_date() {
        return transaction_date;
    }

    public void setTransaction_date(String transaction_date) {
        this.transaction_date = transaction_date;
    }

    public String getValid_till() {
        return valid_till;
    }

    public void setValid_till(String valid_till) {
        this.valid_till = valid_till;
    }

    public Double getGrand_total() {
        return grand_total;
    }

    public void setGrand_total(Double grand_total) {
        this.grand_total = grand_total;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public List<SupplierQuotationItem> getChild() {
        return child;
    }

    public void setChild(List<SupplierQuotationItem> child) {
        this.child = child;
    }
} package mg.itu.model;

public class SupplierQuotationItem {
    private Double rate;
    private Double qty;
    private Double amount;

    
    public Double getRate() {
        return rate;
    }

    public void setRate(Double rate) {
        this.rate = rate;
    }

    public Double getQty() {
        return qty;
    }

    public void setQty(Double qty) {
        this.qty = qty;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }
} package mg.itu.model;

import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateApiResponse {
    @JsonProperty("status")
    private String status;
    @JsonProperty("message")
    private String message;

    
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
} package mg.itu.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.http.HttpSession;
import mg.itu.model.SimpleApiResponse;
import mg.itu.model.SupplierMetadataResponse;
import mg.itu.model.SupplierQuotation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

@Service
public class SupplierQuotationService {

    @Autowired
    private WebClient.Builder webClientBuilder;

    @Value("${api.base-url}")
    private String baseApiUrl;

    private final ObjectMapper objectMapper = new ObjectMapper();

    public SupplierMetadataResponse<SupplierQuotation> getSupplierQuotationList(HttpSession session) throws Exception {
        String accessToken = (String) session.getAttribute("access_token");
        String sid = (String) session.getAttribute("sid");

        if (accessToken == null || sid == null) {
            throw new IllegalStateException("User is not authenticated");
        }

        String url = baseApiUrl + "page.supplier_quotation_api.get_supplier_quotation_list";
        WebClient client = webClientBuilder.baseUrl(url).build();

        try {
            ResponseEntity<String> response = client.get()
                    .header("Authorization", "Bearer " + accessToken)
                    .cookie("sid", sid)
                    .retrieve()
                    .toEntity(String.class)
                    .block();

            if (response != null && response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                return objectMapper.readValue(response.getBody(), objectMapper.getTypeFactory()
                        .constructParametricType(SupplierMetadataResponse.class, SupplierQuotation.class));
            }
            SupplierMetadataResponse<SupplierQuotation> errorResponse = new SupplierMetadataResponse<>();
            errorResponse.setStatus("error");
            errorResponse.setData(null);
            return errorResponse;
        } catch (Exception e) {
            e.printStackTrace();
            SupplierMetadataResponse<SupplierQuotation> errorResponse = new SupplierMetadataResponse<>();
            errorResponse.setStatus("error");
            errorResponse.setData(null);
            return errorResponse;
        }
    }

    public SimpleApiResponse updateSupplierQuotationItemRate(String parent, Double rate, HttpSession session) throws Exception {
        String accessToken = (String) session.getAttribute("access_token");
        String sid = (String) session.getAttribute("sid");

        if (accessToken == null || sid == null) {
            throw new IllegalStateException("User is not authenticated");
        }

        String url = baseApiUrl + "page.supplier_quotation_api.update_supplier_quotation_item_rate?parent=" + parent + "&rate=" + rate;
        WebClient client = webClientBuilder.baseUrl(url).build();

        try {
            ResponseEntity<String> response = client.post()
                    .header("Authorization", "Bearer " + accessToken)
                    .cookie("sid", sid)
                    .retrieve()
                    .toEntity(String.class)
                    .block();

            if (response != null && response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                return objectMapper.readValue(response.getBody(), SimpleApiResponse.class);
            }
            SimpleApiResponse errorResponse = new SimpleApiResponse();
            errorResponse.setStatus("error");
            errorResponse.setMessage("Failed to update Supplier Quotation rate");
            return errorResponse;
        } catch (Exception e) {
            e.printStackTrace();
            SimpleApiResponse errorResponse = new SimpleApiResponse();
            errorResponse.setStatus("error");
            errorResponse.setMessage(e.getMessage());
            return errorResponse;
        }
    }
} package mg.itu.controller;

import jakarta.servlet.http.HttpSession;
import mg.itu.model.SimpleApiResponse;
import mg.itu.model.SupplierMetadataResponse;
import mg.itu.model.SupplierQuotation;
import mg.itu.service.SupplierQuotationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("/api/supplier-quotations")
public class SupplierQuotationController {

    @Autowired
    private SupplierQuotationService supplierQuotationService;

    @GetMapping("/")
    public String getSupplierQuotations(Model model, HttpSession session) {
        try {
            SupplierMetadataResponse<SupplierQuotation> response = supplierQuotationService.getSupplierQuotationList(session);
            if (response != null && "success".equals(response.getStatus())) {
                model.addAttribute("quotations", response.getData());
                model.addAttribute("suppliers", response.getMetadata() != null ? response.getMetadata().getSuppliers() : null);
            } else {
                model.addAttribute("error", "Failed to fetch Supplier Quotations");
            }
        } catch (IllegalStateException e) {
            return "redirect:/api/auth/";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", "An error occurred while fetching Supplier Quotations");
        }
        return "views/supplier-quotations/supplier-quotations";
    }

    @GetMapping("/edit/{id}")
    public String editSupplierQuotation(@PathVariable("id") String id, Model model, HttpSession session) {
        try {
            SupplierMetadataResponse<SupplierQuotation> response = supplierQuotationService.getSupplierQuotationList(session);
            if (response != null && "success".equals(response.getStatus())) {
                SupplierQuotation quotation = response.getData().stream()
                        .filter(q -> q.getName().equals(id))
                        .findFirst()
                        .orElse(null);
                if (quotation != null) {
                    model.addAttribute("quotation", quotation);
                    return "views/supplier-quotations/edit-supplier-quotation";
                }
            }
            model.addAttribute("error", "Supplier Quotation not found or error fetching data");
            return "views/supplier-quotations/supplier-quotations";
        } catch (IllegalStateException e) {
            return "redirect:/api/auth/";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", "An error occurred while fetching Supplier Quotation");
            return "views/supplier-quotations/supplier-quotations";
        }
    }

    @PostMapping("/update")
    public String updateSupplierQuotation(@RequestParam("parent") String parent,
                                         @RequestParam("rate") Double rate,
                                         Model model,
                                         HttpSession session) {
        try {
            SimpleApiResponse response = supplierQuotationService.updateSupplierQuotationItemRate(parent, rate, session);
            SupplierMetadataResponse<SupplierQuotation> listResponse = supplierQuotationService.getSupplierQuotationList(session);
            SupplierQuotation quotation = null;
            if (listResponse != null && "success".equals(listResponse.getStatus())) {
                quotation = listResponse.getData().stream()
                        .filter(q -> q.getName().equals(parent))
                        .findFirst()
                        .orElse(null);
            }

            if (response != null && "success".equals(response.getStatus())) {
                model.addAttribute("success", response.getMessage());
                if (quotation != null) {
                    model.addAttribute("quotation", quotation);
                } else {
                    model.addAttribute("error", "Updated successfully, but failed to fetch updated Supplier Quotation");
                }
                return "views/supplier-quotations/edit-supplier-quotation";
            } else {
                model.addAttribute("error", response != null ? response.getMessage() : "Failed to update Supplier Quotation");
                if (quotation != null) {
                    model.addAttribute("quotation", quotation);
                }
                return "views/supplier-quotations/edit-supplier-quotation";
            }
        } catch (IllegalStateException e) {
            return "redirect:/api/auth/";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", "An error occurred while updating Supplier Quotation");
            return "views/supplier-quotations/edit-supplier-quotation";
        }
    }
} <!DOCTYPE html>
<html lang="fr" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Update Supplier Quotation - DaybyDay</title>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <style>
        .form-container {
            width: 100%;
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background-color: #f8fafc;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
        }
        .form-group button {
            background-color: #10b981;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        .form-group button:hover {
            background-color: #059669;
        }
        .success {
            color: #10b981;
            text-align: center;
            margin-top: 10px;
        }
        .error {
            color: red;
            text-align: center;
            margin-top: 10px;
        }
        .child-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .child-table th, .child-table td {
            border: 1px solid #d1d5db;
            padding: 8px;
            text-align: left;
        }
        .child-table th {
            background-color: #e2e8f0;
        }
    </style>
</head>
<body>
    <div th:replace="~{fragments/side-bar}"></div>

    <div class="header">
        <h1>Update Supplier Quotation</h1>
    </div>

    <div class="form-container">
        <h3 th:text="${'Supplier Quotation: ' + quotation.title}"></h3>
        <table class="child-table">
            <thead>
                <tr>
                    <th>Rate</th>
                    <th>Quantity</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="item : ${quotation.child}">
                    <td th:text="${item.rate}"></td>
                    <td th:text="${item.qty}"></td>
                    <td th:text="${item.amount}"></td>
                </tr>
                <tr th:if="${#lists.isEmpty(quotation.child)}">
                    <td colspan="3">No items found</td>
                </tr>
            </tbody>
        </table>

        <form th:action="@{/api/supplier-quotations/update}" method="post">
            <input type="hidden" name="parent" th:value="${quotation.name}">
            <div class="form-group">
                <label for="rate">New Rate</label>
                <input type="number" id="rate" name="rate" step="0.01" min="0" required>
            </div>
            <div class="form-group">
                <button type="submit">Update Rate</button>
            </div>
            <div th:if="${success}" class="success" th:text="${success}"></div>
            <div th:if="${error}" class="error" th:text="${error}"></div>
        </form>
    </div>

    <div th:replace="~{fragments/footer}"></div>
</body>
</html> <!DOCTYPE html>
<html lang="fr" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Supplier Quotations - ERPNext</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" th:href="@{/css/style.css}">
    <style>
        .filter-container {
            margin: 20px 0;
            display: flex;
            align-items: center;
        }
        .filter-container label {
            margin-right: 10px;
            font-weight: 600;
        }
        .filter-container select {
            padding: 8px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            width: 200px;
        }
    </style>
    <script>
        function filterBySupplier() {
            var select = document.getElementById("supplierFilter");
            var selectedSupplier = select.value;
            var rows = document.querySelectorAll(".projects-table tbody tr");
            rows.forEach(function(row) {
                var supplierCell = row.cells[0].textContent;
                if (selectedSupplier === "" || supplierCell.includes(selectedSupplier)) {
                    row.style.display = "";
                } else {
                    row.style.display = "none";
                }
            });
        }
    </script>
</head>
<body>
    <div th:replace="~{fragments/side-bar}"></div>

    <div class="header">
        <div>
            <h1>Supplier Quotations</h1>
        </div>
    </div>

    <!-- Supplier Filter -->
    <div class="filter-container" th:if="${suppliers}">
        <label for="supplierFilter">Filter by Supplier:</label>
        <select id="supplierFilter" onchange="filterBySupplier()">
            <option value="">All Suppliers</option>
            <option th:each="supplier : ${suppliers}" th:value="${supplier}" th:text="${supplier}"></option>
        </select>
    </div>

    <!-- Liste des Supplier Quotations -->
    <div class="table-container" th:if="${quotations}">
        <div class="table-responsive">
            <table class="projects-table">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Status</th>
                        <th>Transaction Date</th>
                        <th>Valid Till</th>
                        <th>Grand Total</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr th:each="quotation : ${quotations}">
                        <td th:text="${quotation.title}"></td>
                        <td th:text="${quotation.status}"></td>
                        <td th:text="${quotation.transaction_date}"></td>
                        <td th:text="${quotation.valid_till}"></td>
                        <td th:text="${quotation.grand_total}"></td>
                        <td>
                            <a th:href="@{/api/supplier-quotations/edit/{id}(id=${quotation.name})}" class="action-btn">Edit</a>
                        </td>
                    </tr>
                    <tr th:if="${#lists.isEmpty(quotations)}">
                        <td colspan="6">No Supplier Quotations found</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div th:if="${error}" class="error" th:text="${error}"></div>

    <div th:replace="~{fragments/footer}"></div>
</body>
</html> rajouter le attribut , page etc manquante  et modifier si necessaire toutes ces fichiers pour la realisation du scenario que je vous ai expliquer 