{"version":3,"file":"FormField-CAm_QixC.js","sources":["../../../../frontend/src/components/FormField.vue"],"sourcesContent":["<template>\n\t<div v-if=\"showField\" class=\"flex flex-col gap-1.5\">\n\t\t<!-- Label -->\n\t\t<span\n\t\t\tv-if=\"!['Check', 'Section Break', 'Column Break'].includes(props.fieldtype)\"\n\t\t\t:class=\"[\n\t\t\t\t// mark field as mandatory\n\t\t\t\tprops.reqd ? `after:content-['_*'] after:text-red-600` : ``,\n\t\t\t\t`block text-sm leading-5 text-gray-700`,\n\t\t\t]\"\n\t\t>\n\t\t\t{{ props.label }}\n\t\t</span>\n\n\t\t<!-- Select or Link field with predefined options -->\n\t\t<Autocomplete\n\t\t\tv-if=\"props.fieldtype === 'Select' || props.documentList\"\n\t\t\t:class=\"isReadOnly ? 'pointer-events-none' : ''\"\n\t\t\t:placeholder=\"__('Select {0}', [props.label])\"\n\t\t\t:options=\"selectionList\"\n\t\t\t:modelValue=\"modelValue\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t\t@update:modelValue=\"(v) => emit('update:modelValue', v?.value)\"\n\t\t/>\n\n\t\t<!-- Link field -->\n\t\t<Link\n\t\t\tv-else-if=\"props.fieldtype === 'Link'\"\n\t\t\t:doctype=\"props.options\"\n\t\t\t:modelValue=\"modelValue\"\n\t\t\t:filters=\"props.linkFilters\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t\t@update:modelValue=\"(v) => emit('update:modelValue', v)\"\n\t\t/>\n\n\t\t<!-- Text -->\n\t\t<Input\n\t\t\tv-else-if=\"['Text Editor', 'Small Text', 'Text', 'Long Text'].includes(props.fieldtype)\"\n\t\t\ttype=\"textarea\"\n\t\t\t:value=\"modelValue\"\n\t\t\t:placeholder=\"__('Enter {0}', [props.label])\"\n\t\t\t@input=\"(v) => emit('update:modelValue', v)\"\n\t\t\t@change=\"(v) => emit('change', v)\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t\tclass=\"h-15\"\n\t\t/>\n\n\t\t<!-- Check -->\n\t\t<Input\n\t\t\tv-else-if=\"props.fieldtype === 'Check'\"\n\t\t\ttype=\"checkbox\"\n\t\t\t:label=\"props.label\"\n\t\t\t:value=\"modelValue\"\n\t\t\t@input=\"(v) => emit('update:modelValue', v)\"\n\t\t\t@change=\"(v) => emit('change', v)\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t\tclass=\"rounded-sm text-gray-800\"\n\t\t/>\n\n\t\t<!-- Data field -->\n\t\t<Input\n\t\t\tv-else-if=\"props.fieldtype === 'Data'\"\n\t\t\ttype=\"text\"\n\t\t\t:value=\"modelValue\"\n\t\t\t@input=\"(v) => emit('update:modelValue', v)\"\n\t\t\t@change=\"(v) => emit('change', v)\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t/>\n\n\t\t<!-- Read only currency field -->\n\t\t<Input\n\t\t\tv-else-if=\"props.fieldtype === 'Currency' && isReadOnly\"\n\t\t\ttype=\"text\"\n\t\t\t:value=\"modelValue\"\n\t\t\t@input=\"(v) => emit('update:modelValue', v)\"\n\t\t\t@change=\"(v) => emit('change', v)\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t/>\n\n\t\t<!-- Float/Int field -->\n\t\t<Input\n\t\t\tv-else-if=\"isNumberType\"\n\t\t\ttype=\"number\"\n\t\t\t:value=\"modelValue\"\n\t\t\t@input=\"(v) => emit('update:modelValue', v)\"\n\t\t\t@change=\"(v) => emit('change', v)\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t/>\n\n\t\t<!-- Section Break -->\n\t\t<div\n\t\t\tv-else-if=\"props.fieldtype === 'Section Break'\"\n\t\t\t:class=\"props.addSectionPadding ? 'mt-2' : ''\"\n\t\t>\n\t\t\t<h2\n\t\t\t\tv-if=\"props.label\"\n\t\t\t\tclass=\"text-base font-semibold text-gray-800\"\n\t\t\t\t:class=\"props.addSectionPadding ? 'pt-4' : ''\"\n\t\t\t>\n\t\t\t\t{{ props.label }}\n\t\t\t</h2>\n\t\t</div>\n\n\t\t<!-- Date -->\n\t\t<!-- FIXME: default datepicker has poor UI -->\n\t\t<Input\n\t\t\tv-else-if=\"props.fieldtype === 'Date'\"\n\t\t\ttype=\"date\"\n\t\t\t:value=\"modelValue\"\n\t\t\t:placeholder=\"__('Select {0}', [props.label])\"\n\t\t\t:formatValue=\"(val) => dayjs(val).format('DD-MM-YYYY')\"\n\t\t\t@input=\"(v) => emit('update:modelValue', v)\"\n\t\t\t@change=\"(v) => emit('change', v)\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t\t:min=\"props.minDate\"\n\t\t\t:max=\"props.maxDate\"\n\t\t/>\n\n\t\t<!-- Time -->\n\t\t<!-- Datetime -->\n\t\t<DateTimePicker\n\t\t\tv-else-if=\"props.fieldtype === 'Datetime'\"\n\t\t\t:value=\"modelValue\"\n\t\t\t:placeholder=\"`Select ${props.label}`\"\n\t\t\t:formatter=\"(val) => dayjs(val).format('DD-MM-YYYY HH:mm:ss')\"\n\t\t\t@update:modelValue=\"(v) => emit('update:modelValue', v)\"\n\t\t\tv-bind=\"$attrs\"\n\t\t\t:disabled=\"isReadOnly\"\n\t\t/>\n\n\t\t<ErrorMessage :message=\"props.errorMessage\" />\n\t</div>\n</template>\n\n<script setup>\nimport { Autocomplete, DateTimePicker, ErrorMessage, Input } from \"frappe-ui\"\nimport { computed, onMounted, inject } from \"vue\"\n\nimport Link from \"@/components/Link.vue\"\n\nconst __ = inject(\"$translate\")\n\nconst props = defineProps({\n\tfieldtype: String,\n\tfieldname: String,\n\tmodelValue: [String, Number, Boolean, Array, Object],\n\tdefault: [String, Number, Boolean, Array, Object],\n\tlabel: String,\n\toptions: [String, Array],\n\tlinkFilters: Object,\n\tdocumentList: Array,\n\treadOnly: [Boolean, Number],\n\treqd: [Boolean, Number],\n\thidden: {\n\t\ttype: [Boolean, Number],\n\t\tdefault: false,\n\t},\n\terrorMessage: String,\n\tminDate: String,\n\tmaxDate: String,\n\taddSectionPadding: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n\t},\n})\n\nconst emit = defineEmits([\"change\", \"update:modelValue\"])\nconst dayjs = inject(\"$dayjs\")\n\nconst showField = computed(() => {\n\tif (props.readOnly && !isLayoutField.value && !props.modelValue) return false\n\n\treturn props.fieldtype !== \"Table\" && !props.hidden\n})\n\nconst isNumberType = computed(() => {\n\treturn [\"Int\", \"Float\", \"Currency\"].includes(props.fieldtype)\n})\n\nconst isLayoutField = computed(() => {\n\treturn [\"Section Break\", \"Column Break\"].includes(props.fieldtype)\n})\n\nconst isReadOnly = computed(() => {\n\treturn Boolean(props.readOnly)\n})\n\nconst selectionList = computed(() => {\n\tif (props.fieldtype === \"Link\" && props.documentList) {\n\t\treturn props.documentList\n\t} else if (props.fieldtype == \"Select\" && props.options) {\n\t\tconst options = props.options.split(\"\\n\")\n\t\treturn options.map((option) => ({\n\t\t\tlabel: __(option),\n\t\t\tvalue: option,\n\t\t}))\n\t}\n\n\treturn []\n})\n\nfunction setDefaultValue() {\n\t// set default values\n\tif (props.modelValue) return\n\n\tif (props.default) {\n\t\tif (props.fieldtype === \"Check\") {\n\t\t\temit(\"update:modelValue\", props.default === \"1\" ? true : false)\n\t\t} else if (props.fieldtype === \"Date\" && props.default === \"Today\") {\n\t\t\temit(\"update:modelValue\", dayjs().format(\"YYYY-MM-DD\"))\n\t\t} else if (isNumberType.value) {\n\t\t\temit(\"update:modelValue\", parseFloat(props.default || 0))\n\t\t} else {\n\t\t\temit(\"update:modelValue\", props.default)\n\t\t}\n\t} else {\n\t\tprops.fieldtype === \"Check\" ? emit(\"update:modelValue\", false) : emit(\"update:modelValue\", \"\")\n\t}\n}\n\nonMounted(() => {\n\tsetDefaultValue()\n})\n</script>\n"],"names":["__","inject","props","__props","emit","__emit","dayjs","showField","computed","isLayoutField","isNumberType","isReadOnly","selectionList","option","setDefaultValue","onMounted"],"mappings":"gsBAmJA,MAAMA,EAAKC,EAAO,YAAY,EAExBC,EAAQC,EAwBRC,EAAOC,EACPC,EAAQL,EAAO,QAAQ,EAEvBM,EAAYC,EAAS,IACtBN,EAAM,UAAY,CAACO,EAAc,OAAS,CAACP,EAAM,WAAmB,GAEjEA,EAAM,YAAc,SAAW,CAACA,EAAM,MAC7C,EAEKQ,EAAeF,EAAS,IACtB,CAAC,MAAO,QAAS,UAAU,EAAE,SAASN,EAAM,SAAS,CAC5D,EAEKO,EAAgBD,EAAS,IACvB,CAAC,gBAAiB,cAAc,EAAE,SAASN,EAAM,SAAS,CACjE,EAEKS,EAAaH,EAAS,IACpB,EAAQN,EAAM,QACrB,EAEKU,EAAgBJ,EAAS,IAC1BN,EAAM,YAAc,QAAUA,EAAM,aAChCA,EAAM,aACHA,EAAM,WAAa,UAAYA,EAAM,QAC/BA,EAAM,QAAQ,MAAM;AAAA,CAAI,EACzB,IAAKW,IAAY,CAC/B,MAAOb,EAAGa,CAAM,EAChB,MAAOA,CACV,EAAI,EAGI,CAAA,CACP,EAED,SAASC,GAAkB,CAEtBZ,EAAM,aAENA,EAAM,QACLA,EAAM,YAAc,QACvBE,EAAK,oBAAqBF,EAAM,UAAY,GAAkB,EACpDA,EAAM,YAAc,QAAUA,EAAM,UAAY,QAC1DE,EAAK,oBAAqBE,IAAQ,OAAO,YAAY,CAAC,EAC5CI,EAAa,MACvBN,EAAK,oBAAqB,WAAWF,EAAM,SAAW,CAAC,CAAC,EAExDE,EAAK,oBAAqBF,EAAM,OAAO,EAGxCA,EAAM,YAAc,QAAUE,EAAK,oBAAqB,EAAK,EAAIA,EAAK,oBAAqB,EAAE,EAE/F,CAEA,OAAAW,EAAU,IAAM,CACfD,EAAe,CAChB,CAAC"}