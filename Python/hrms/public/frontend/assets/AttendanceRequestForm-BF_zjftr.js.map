{"version":3,"file":"AttendanceRequestForm-BF_zjftr.js","sources":["../../../../frontend/src/views/attendance/AttendanceRequestForm.vue"],"sourcesContent":["<template>\n\t<ion-page>\n\t\t<ion-content :fullscreen=\"true\">\n\t\t\t<FormView\n\t\t\t\tv-if=\"formFields.data\"\n\t\t\t\tdoctype=\"Attendance Request\"\n\t\t\t\tv-model=\"attendanceRequest\"\n\t\t\t\t:isSubmittable=\"true\"\n\t\t\t\t:fields=\"formFields.data\"\n\t\t\t\t:id=\"props.id\"\n\t\t\t\t@validateForm=\"validateForm\"\n\t\t\t/>\n\t\t</ion-content>\n\t</ion-page>\n</template>\n\n<script setup>\nimport { IonPage, IonContent } from \"@ionic/vue\"\nimport { createResource } from \"frappe-ui\"\nimport { ref, watch, inject } from \"vue\"\n\nimport FormView from \"@/components/FormView.vue\"\n\nconst employee = inject(\"$employee\")\nconst __ = inject(\"$translate\")\n\nconst props = defineProps({\n\tid: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n})\n\n// reactive object to store form data\nconst attendanceRequest = ref({})\n\n// get form fields\nconst formFields = createResource({\n\turl: \"hrms.api.get_doctype_fields\",\n\tparams: { doctype: \"Attendance Request\" },\n\tauto: true,\n\ttransform(data) {\n\t\tif (props.id) return data\n\t\treturn data.filter(\n\t\t\t(field) => ![\"employee\", \"employee_name\", \"status\", \"company\"].includes(field.fieldname)\n\t\t)\n\t},\n})\n\n// form scripts\nwatch(\n\t() => attendanceRequest.value.employee,\n\t(employee_id) => {\n\t\tif (props.id && employee_id !== employee.data.name) {\n\t\t\t// if employee is not the current user, set form as read only\n\t\t\tsetFormReadOnly()\n\t\t}\n\t}\n)\n\nwatch(\n\t() => attendanceRequest.value.from_date,\n\t(from_date) => {\n\t\tif (!attendanceRequest.value.to_date) {\n\t\t\tattendanceRequest.value.to_date = from_date\n\t\t}\n\t}\n)\n\nwatch(\n\t() => [attendanceRequest.value.from_date, attendanceRequest.value.to_date],\n\t([from_date, to_date]) => {\n\t\tvalidateDates(from_date, to_date)\n\t}\n)\n\nwatch(\n\t() => attendanceRequest.value.half_day,\n\t(half_day) => {\n\t\tconst half_day_date = formFields.data.find((field) => field.fieldname === \"half_day_date\")\n\t\thalf_day_date.hidden = !half_day\n\t}\n)\n\n// helper functions\nfunction setFormReadOnly() {\n\tformFields.data.map((field) => (field.read_only = true))\n}\n\nfunction validateDates(from_date, to_date) {\n\tif (!(from_date && to_date)) return\n\n\tconst error_message = from_date > to_date ? __(\"To Date cannot be before From Date\") : \"\"\n\n\tconst from_date_field = formFields.data.find((field) => field.fieldname === \"from_date\")\n\tfrom_date_field.error_message = error_message\n}\n\nfunction validateForm() {\n\tattendanceRequest.value.employee = employee.data.name\n}\n</script>\n"],"names":["employee","inject","__","props","__props","attendanceRequest","ref","formFields","createResource","data","field","watch","employee_id","setFormReadOnly","from_date","to_date","validateDates","half_day","half_day_date","error_message","from_date_field","validateForm"],"mappings":"ybAuBA,MAAMA,EAAWC,EAAO,WAAW,EAC7BC,EAAKD,EAAO,YAAY,EAExBE,EAAQC,EAQRC,EAAoBC,EAAI,CAAE,CAAA,EAG1BC,EAAaC,EAAe,CACjC,IAAK,8BACL,OAAQ,CAAE,QAAS,oBAAsB,EACzC,KAAM,GACN,UAAUC,EAAM,CACf,OAAIN,EAAM,GAAWM,EACdA,EAAK,OACVC,GAAU,CAAC,CAAC,WAAY,gBAAiB,SAAU,SAAS,EAAE,SAASA,EAAM,SAAS,CAC1F,CACE,CACF,CAAC,EAGDC,EACC,IAAMN,EAAkB,MAAM,SAC7BO,GAAgB,CACZT,EAAM,IAAMS,IAAgBZ,EAAS,KAAK,MAE7Ca,EAAe,CAElB,CACA,EAEAF,EACC,IAAMN,EAAkB,MAAM,UAC7BS,GAAc,CACTT,EAAkB,MAAM,UAC5BA,EAAkB,MAAM,QAAUS,EAErC,CACA,EAEAH,EACC,IAAM,CAACN,EAAkB,MAAM,UAAWA,EAAkB,MAAM,OAAO,EACzE,CAAC,CAACS,EAAWC,CAAO,IAAM,CACzBC,EAAcF,EAAWC,CAAO,CAClC,CACA,EAEAJ,EACC,IAAMN,EAAkB,MAAM,SAC7BY,GAAa,CACb,MAAMC,EAAgBX,EAAW,KAAK,KAAMG,GAAUA,EAAM,YAAc,eAAe,EACzFQ,EAAc,OAAS,CAACD,CAC1B,CACA,EAGA,SAASJ,GAAkB,CAC1BN,EAAW,KAAK,IAAKG,GAAWA,EAAM,UAAY,EAAK,CACxD,CAEA,SAASM,EAAcF,EAAWC,EAAS,CAC1C,GAAI,EAAED,GAAaC,GAAU,OAE7B,MAAMI,EAAgBL,EAAYC,EAAUb,EAAG,oCAAoC,EAAI,GAEjFkB,EAAkBb,EAAW,KAAK,KAAMG,GAAUA,EAAM,YAAc,WAAW,EACvFU,EAAgB,cAAgBD,CACjC,CAEA,SAASE,GAAe,CACvBhB,EAAkB,MAAM,SAAWL,EAAS,KAAK,IAClD"}